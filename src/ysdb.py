from telegram import Update, User, Chat
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import argparse
from db_worker import DbWorkerService
import logging
import json
import time
from datetime import timedelta, datetime
from ysdb_exception import YSDBException
from zoneinfo import ZoneInfo
from file_worker import FileStorage
    
def MakeHumanReadableAmount(value:int) -> str:     
    if value > 1000000:
        return str(round(float(value)/1000000.0, 2))+"M"
    if value > 1000:
        return str(round(float(value)/1000.0, 1))+"k" 
        
    return str(value)

class CommandLimits:
    def __init__(self, global_min_inteval:float, chat_min_inteval:float):
        self.GlobalMinimumInterval = global_min_inteval
        self.ChatMinimumInterval = chat_min_inteval
        self.ChatLimits:dict[int, float] = {}
        self.LastHandled = time.time()

    def Check(self, user_id:int, chat_id:int) -> bool:
        t = time.time() 
        if t - self.LastHandled < self.GlobalMinimumInterval:            
            return True
        if chat_id in self.ChatLimits:
            if t - self.ChatLimits[chat_id] < self.ChatMinimumInterval: 
                return True
            self.ChatLimits[chat_id] = t
        else:
            self.ChatLimits[chat_id] = t    
        
        self.LastHandledStatCommand = t
        return False        

class YSDBot:
    def __init__(self, db_worker:DbWorkerService, file_stor:FileStorage):
        self.Db = db_worker
        self.StartTS = int(time.time())
        
        self.PushLimits = CommandLimits(0.3, 0.5)
        self.PopLimits = CommandLimits(0.4, 1.0)
        self.MyStatLimits = CommandLimits(0.7, 1.25)
        self.StatLimits = CommandLimits(1, 3)    
        self.MaxFileSize = 1024*1024*256
        self.FileStorage = file_stor
        

    @staticmethod
    def GetUserTitleForLog(user:User) -> str:
        return "["+str(user.id)+"]{"+user.name+"}" 
    
    @staticmethod
    def GetChatTitleForLog(ch:Chat) -> str:
        return "["+str(ch.id)+"]{"+ch.effective_name+"}"     

    @staticmethod    
    def MakeUserTitle(user:User) -> str:
        result = user.full_name
        if (len(result) < 2):
            result = user.name
        if (len(result) < 1):
            result = "@"+str(user.id)
        return result
    
    @staticmethod    
    def MakeChatTitle(ch:Chat) -> str:
        result = ch.effective_name
        if (len(result) < 1):
            result = "@"+str(ch.id)
        return result  

    @staticmethod
    def ParsePushMessage(msg:str) -> int:
        try:
            parts = msg.strip().split(" ", 1)
            second_part = parts[1].strip()
            koeff = 1
            if second_part[-1] in ['k', 'K', '–∫', '–ö']:
                second_part = second_part[:-1]
                koeff = 1000
            return int(second_part)*koeff
        except BaseException as ex:
            raise YSDBException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /push")     

    @staticmethod
    def ParseTopParamsAndValidate(msg:str) -> int:
        result = None
        try:
            parts = msg.strip().split(" ", 1)
            if len(parts) < 2:
                return 7
            else:
                second_part = parts[1].strip()
                result = int(second_part)
        except BaseException as ex:
            raise YSDBException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /top")    
        
        if result < 2:
            raise YSDBException("üö´ –¢–æ–ø –º–µ–Ω—å—à–µ —á–µ–º –∑–∞ 2 –¥–Ω—è —Å—á–∏—Ç–∞—Ç—å –Ω–µ–ª—å–∑—è")            
        if result > 180:
            raise YSDBException("üö´ –¢–æ–ø –±–æ–ª—å—à–µ —á–µ–º –∑–∞ 180 –¥–Ω–µ–π —Å—á–∏—Ç–∞—Ç—å –Ω–µ–ª—å–∑—è") 
        return result
               
    @staticmethod
    def ParseStatParamsAndValidate(msg:str) -> int:

        result = None
        try:
            parts = msg.strip().split(" ", 1)
            if len(parts) < 2:
                return 7
            else:
                second_part = parts[1].strip()
                result = int(second_part)
        except BaseException as ex:
            raise YSDBException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /stat")    
        
        if result < 2:
            raise YSDBException("üö´ –°—Ç–∞—Å—Ç–∏—Ç–∏–∫—É –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞ 1 –¥–µ–Ω—å —Å—á–∏—Ç–∞—Ç—å –Ω–µ–ª—å–∑—è") 
        return result

    @staticmethod
    def ParseMyStatType(msg:str) -> str:
        try:
            parts = msg.strip().split(" ", 1)            
            return parts[1].strip().lower()
        except BaseException as ex:
            return ""

    def MakeLastPushingInfo(self, user_id:int, chat_id:int, count:int) -> str:
        user_contribs = self.Db.SelectLastUserSelfContribs(user_id, chat_id, count)
        result = ""
        cc = 1
        for uc in user_contribs:
            if cc > 1:
                result += "\n"

            result += "‚Ññ"+str(cc) +" " + uc.TS.strftime("%d.%m.%Y %H:%M")+" üìì "+MakeHumanReadableAmount(uc.Amount)
            cc += 1

        return result
    
    def MakeShortStatBlock(self, user_id:int, chat_id:int) -> str:
        result = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Å—É—Ç–∫–∏: " + MakeHumanReadableAmount(self.Db.GetAmountSum(user_id, chat_id, datetime.now() - timedelta(days=1), datetime.now()))
        result += "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –Ω–µ–¥–µ–ª—é: " + MakeHumanReadableAmount(self.Db.GetAmountSum(user_id, chat_id, datetime.now() - timedelta(days=7), datetime.now()))
        return result

    def MakeLastPushingInfoBlock(self, user_id:int, chat_id:int, count:int) -> str:
        result = "üìë –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"

        result += self.MakeLastPushingInfo(user_id, chat_id, count)

        return result
    
    def MakeTopBlock(self, chat_id:int, day_count:int) -> str:
        result = "üèÜ T–û–ü –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ "+str(day_count)+" –¥–Ω–µ–π:\n"

        top = self.Db.GetTop(chat_id, datetime.now() - timedelta(days=day_count), datetime.now())
        
        cc = 1
        for item in top:
            if cc > 1:
                result += "\n"

            result += "‚Ññ"+str(cc) +" " + item.Title+" : "+MakeHumanReadableAmount(item.Amount)
            cc += 1

        return result        

    @staticmethod
    def MakeErrorMessage(ex: YSDBException) -> str:
        return "‚õîÔ∏è –û—à–∏–±–∫–∞!\n\n"+str(ex)
    
    @staticmethod
    def MakeExternalErrorMessage(ex: BaseException) -> str:
        return "‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: "+str(ex)

    async def push(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        logging.info("[PUSH] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat) + ", text: "+update.message.text)    
        if self.PushLimits.Check(update.effective_user.id, update.effective_chat.id):
            logging.warning("[PUSH] Ignore command from user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat) + ", text: "+update.message.text)
            return
        self.LastHandledPushCommand = time.time()

        try:
            self.Db.EnsureUserExists(update.effective_user.id, YSDBot.MakeUserTitle(update.effective_user))
            self.Db.EnsureChatExists(update.effective_chat.id, YSDBot.MakeChatTitle(update.effective_chat))            
        
            amount = YSDBot.ParsePushMessage(update.message.text)            

            if amount < 1:
                raise YSDBException("üö´ –ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø—É—à–∏—Ç—å –Ω–µ–ª—å–∑—è") 
            if amount > 80000:
                raise YSDBException("üö´ –ë–æ–ª—å—à–µ 80k –ø—É—à–∏—Ç—å –Ω–µ–ª—å–∑—è")
            current_day_counter = self.Db.GetAmountSum(update.effective_user.id, update.effective_chat.id, datetime.now() - timedelta(days=1), datetime.now())     
            if current_day_counter > 100000:
                raise YSDBException("ü•¥ –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –º–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–ª. –¢–µ–±–µ –Ω–∞–¥–æ –±—ã –æ—Ç–¥–æ—Ö–Ω—É—Ç—å")
            
            self.Db.InsertSelfContribRecord(update.effective_user.id, update.effective_chat.id, amount)

            reply_message = "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ "+MakeHumanReadableAmount(amount)+" —Å–∏–º–≤–æ–ª–æ–≤."
            reply_message += "\n\n"+self.MakeShortStatBlock(update.effective_user.id, update.effective_chat.id)
            #reply_message += "\n\n"+self.MakeLastPushingInfoBlock(update.effective_user.id, update.effective_chat.id, 3)

            await update.message.reply_text(reply_message) 
        except YSDBException as ex:
            await update.message.reply_text(YSDBot.MakeErrorMessage(ex)) 
        except BaseException as ex:    
            logging.error("[PUSH] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat) + ", text: "+update.message.text + ". EXCEPTION: "+str(ex))       
            await update.message.reply_text(YSDBot.MakeExternalErrorMessage(ex))
    

    async def pop(self,update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:                

        logging.info("[POP] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat)+ ", text: "+update.message.text)    
        if self.PopLimits.Check(update.effective_user.id, update.effective_chat.id):
            logging.warning("[POP] Ignore command from user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat)+ ", text: "+update.message.text)
            return
        self.LastHandledPopCommand = time.time()

        if not update.message.text.strip().lower().endswith("yes"):
            reply_message = "‚ö†Ô∏è –ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é:\n\n/pop yes"
            reply_message += "\n\n"+self.MakeLastPushingInfoBlock(update.effective_user.id, update.effective_chat.id, 5)
            await update.message.reply_text(reply_message) 

            return

        try:
            self.Db.DeleteLastSelfContribRecords(update.effective_user.id, update.effective_chat.id, 1)
            reply_message = "‚òëÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏.\n\n"+self.MakeLastPushingInfoBlock(update.effective_user.id, update.effective_chat.id, 5)
            await update.message.reply_text(reply_message) 
        except YSDBException as ex:
            await update.message.reply_text(YSDBot.MakeErrorMessage(ex)) 
        except BaseException as ex:    
            logging.error("[PUSH] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat) + ", text: "+update.message.text + ". EXCEPTION: "+str(ex))       
            await update.message.reply_text(YSDBot.MakeExternalErrorMessage(ex))
           

    async def mystat(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        logging.info("[MYSTAT] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat))    
        if self.MyStatLimits.Check(update.effective_user.id, update.effective_chat.id):
            logging.warning("[MYSTAT] Ignore command from user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat))        
            return
        self.LastHandledMyStatCommand = time.time()

        t = YSDBot.ParseMyStatType(update.message.text)
        full = (t == "full")

        try:
            stat_message = "–ü—Ä–∏–≤–µ—Ç, " + YSDBot.MakeUserTitle(update.effective_user) + "!\n\n"
            stat_message += self.MakeLastPushingInfoBlock(update.effective_user.id, update.effective_chat.id, 10 if full else 5)

            stat_message += "\n\nüìä –î–∞–Ω–Ω—ã–µ –ø–æ –∑–Ω–∞–∫–∞–º"
            stat_message += "\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: "+MakeHumanReadableAmount(self.Db.GetAmountSum(update.effective_user.id, update.effective_chat.id, datetime.now() - timedelta(days=1), datetime.now()))
            #stat_message += "\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—É—Ç–æ–∫: "+MakeHumanReadableAmount(self.Db.GetAmountSum(update.effective_user.id, update.effective_chat.id, datetime.now() - timedelta(days=3), datetime.now()))
            stat_message += "\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Å—É—Ç–æ–∫: "+MakeHumanReadableAmount(self.Db.GetAmountSum(update.effective_user.id, update.effective_chat.id, datetime.now() - timedelta(days=7), datetime.now()))
            if full:
                stat_message += "\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—É—Ç–æ–∫: "+MakeHumanReadableAmount(self.Db.GetAmountSum(update.effective_user.id, update.effective_chat.id, datetime.now() - timedelta(days=15), datetime.now()))
            stat_message += "\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—É—Ç–æ–∫: "+MakeHumanReadableAmount(self.Db.GetAmountSum(update.effective_user.id, update.effective_chat.id, datetime.now() - timedelta(days=30), datetime.now()))
            if full:
                stat_message += "\n–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: "+MakeHumanReadableAmount(self.Db.GetAmountSum(update.effective_user.id, update.effective_chat.id, datetime.now() - timedelta(days=3600), datetime.now()))

            if update.effective_user.id == update.effective_chat.id:
                stat_message += "\n\n((–¢—É—Ç –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º))"

            await update.message.reply_text(stat_message)     
        except YSDBException as ex:
            await update.message.reply_text(YSDBot.MakeErrorMessage(ex)) 
        except BaseException as ex:    
            logging.error("[MYSTAT] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat) + ", text: "+update.message.text + ". EXCEPTION: "+str(ex))       
            await update.message.reply_text(YSDBot.MakeExternalErrorMessage(ex))



    

    async def stat(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:        
        logging.info("[STAT] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat))    
        if self.StatLimits.Check(update.effective_user.id, update.effective_chat.id):
            logging.warning("[STAT] Ignore command from user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat))                
            return

        try:
            day_count = YSDBot.ParseStatParamsAndValidate(update.message.text)            
            stat_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ "+str(day_count)+" –¥–Ω–µ–π (—á–∞—Ç " + YSDBot.MakeChatTitle(update.effective_chat) + ")\n"
            total_amount = self.Db.GetChatAmountSum(update.effective_chat.id, datetime.now() - timedelta(days=day_count), datetime.now())
            stat_message += "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: "+MakeHumanReadableAmount(total_amount)
            stat_message += "\n–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ —Å—É—Ç–∫–∏: " + MakeHumanReadableAmount(total_amount/day_count)                     
            stat_message += "\n–ü–∏—à—É—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: "+str(self.Db.GetChatActiveUserCount(update.effective_chat.id, datetime.now() - timedelta(days=day_count), datetime.now()))                     
            stat_message += "\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ —é–∑–µ—Ä–∞–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /top (–∏–ª–∏ /top <–∫–æ–ª-–≤–æ –¥–Ω–µ–π>, –Ω–∞–ø—Ä–∏–º–µ—Ä, /top 25)"
            await update.message.reply_text(stat_message)     
        except YSDBException as ex:
            await update.message.reply_text(YSDBot.MakeErrorMessage(ex)) 
        except BaseException as ex:    
            logging.error("[STAT] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat) + ", text: "+update.message.text + ". EXCEPTION: "+str(ex))       
            await update.message.reply_text(YSDBot.MakeExternalErrorMessage(ex))  

    async def top(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:        
        logging.info("[TOP] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat))    
        if self.StatLimits.Check(update.effective_user.id, update.effective_chat.id):
            logging.warning("[TOP] Ignore command from user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat))                
            return
        self.LastHandledStatCommand = time.time()

        try:
            day_count = YSDBot.ParseTopParamsAndValidate(update.message.text)
            stat_message = self.MakeTopBlock(update.effective_chat.id, day_count)
            #stat_message+= "\n\n–î–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç—É: " + YSDBot.MakeChatTitle(update.effective_chat)         

            await update.message.reply_text(stat_message)     
        except YSDBException as ex:
            await update.message.reply_text(YSDBot.MakeErrorMessage(ex)) 
        except BaseException as ex:    
            logging.error("[TOP] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat) + ", text: "+update.message.text + ". EXCEPTION: "+str(ex))       
            await update.message.reply_text(YSDBot.MakeExternalErrorMessage(ex))              

    @staticmethod
    def get_help() -> str:
        result = "–ö–æ–º–∞–Ω–¥—ã: "
        result +="\nüìà –ú–æ—è —Å—Ç–∞—Ç–∏c—Ç–∏–∫–∞: /mystat [full]"
        result +="\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤: /push <–∫–æ–ª–∏—á–µc—Ç–≤–æ –∑–Ω–∞–∫–æ–≤>"
        result +="\n‚ùï –ü—Ä–∏–º–µ—Ä—ã:"
        result +="\n‚ùï‚ñ´Ô∏è /push 190"
        result +="\n‚ùï‚ñ´Ô∏è /push 5k"
        result +="\n‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –æ –∑–Ω–∞–∫–∞—Ö: /pop yes"
        result +="\nüèÜ –¢–æ–ø —é–∑–µ—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: /top [<–∫–æ–ª-–≤–æ –¥–Ω–µ–π>]"        
        result +="\n‚ùï –ü—Ä–∏–º–µ—Ä—ã:"
        result +="\n‚ùï‚ñ´Ô∏è /top 15"
        result +="\n‚ùï‚ñ´Ô∏è /top"        
        result +="\n‚ùï –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é: 7"
        result +="\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞: /stat [<–∫–æ–ª-–≤–æ –¥–Ω–µ–π>]"
        result +="\n‚ùï –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é: 7"

        return result

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        ut = YSDBot.GetUserTitleForLog(update.effective_user)
        logging.info("[STATUS] user id "+ut+", chat id "+YSDBot.GetChatTitleForLog(update.effective_chat))    
        status_msg = "–ü—Ä–∏–≤–µ—Ç, "+YSDBot.MakeUserTitle(update.effective_user)+"! ("+ut+")"
        status_msg +="\n–≠—Ç–æ —á–∞—Ç: "+YSDBot.MakeChatTitle(update.effective_chat)
        uptime_sec = time.time() - self.StartTS
        uptime = timedelta(seconds = uptime_sec)
        status_msg +="\n–ê–ø—Ç–∞–π–º "+ str(uptime)
        status_msg += "\n\n"+ YSDBot.get_help()

        #status_msg +="\n–í–µ—Ä—Å–∏—è "+ str(uptime)
        await update.message.reply_text(status_msg)

    async def downloader(self, update, context):            
        logging.info("[DOWNLOADER] user id "+YSDBot.GetUserTitleForLog(update.effective_user))    

        try:
            if not self.Db.IsUploadAllowedForUser(update.effective_user.id):
                raise YSDBException("–í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

            file = await context.bot.get_file(update.message.document)       
            
            if file.file_size > self.MaxFileSize:
                raise YSDBException("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: "+MakeHumanReadableAmount(self.MaxFileSize))
            
            file_full_path = self.FileStorage.GetFileFullPath(file.file_path)
            logging.info("[DOWNLOADER] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+" file size "+str(file.file_size)+" downloading...") 
            await file.download_to_drive(file_full_path) 
            logging.info("[DOWNLOADER] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+" file size "+str(file.file_size)+" download success") 

            await update.message.reply_text("‚òëÔ∏è –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò–º—è —Ñ–∞–π–ª–∞: "+file.file_path)
        except YSDBException as ex:
            await update.message.reply_text(YSDBot.MakeErrorMessage(ex)) 
        except BaseException as ex:    
            logging.error("[DOWNLOADER] user id "+YSDBot.GetUserTitleForLog(update.effective_user)+ ". EXCEPTION: "+str(ex))       
            await update.message.reply_text(YSDBot.MakeExternalErrorMessage(ex))         


if __name__ == '__main__':
    logging.basicConfig(level=logging.WARNING, format='%(asctime)s.%(msecs)03d %(levelname)s %(module)s - %(funcName)s: %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

    parser = argparse.ArgumentParser(
        prog = 'YSDB', description = '''Your self-discipline bot''', epilog = '''(c) 2024''')   


    parser.add_argument ('--conf', dest='conf', action="store", type=str, required=True)

    args = parser.parse_args()

    
    with open(args.conf, 'r') as file:
        conf = json.load(file)

       
    file_str = FileStorage(conf['files_dir'])

    db = DbWorkerService(conf['db'])

    app = ApplicationBuilder().token(conf['bot_token']).build()

    bot = YSDBot(db, file_str)

    app.add_handler(CommandHandler("status", bot.status))
    app.add_handler(CommandHandler("push", bot.push))
    app.add_handler(CommandHandler("pop", bot.pop))
    app.add_handler(CommandHandler("mystat", bot.mystat))
    app.add_handler(CommandHandler("stat", bot.stat))
    app.add_handler(CommandHandler("top", bot.top))
    app.add_handler(MessageHandler(filters.Document.ALL, bot.downloader))

    app.run_polling()

